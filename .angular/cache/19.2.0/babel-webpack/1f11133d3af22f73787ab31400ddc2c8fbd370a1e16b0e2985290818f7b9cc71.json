{"ast":null,"code":"import _asyncToGenerator from \"/Users/naranjax/app-heroes/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// src/app/heroes/components/hero-form/hero-form.component.spec.ts\nimport { TestBed } from '@angular/core/testing';\nimport { HeroFormComponent } from './hero-form.component';\nimport { HeroesService } from '../../../core/services/heroes.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormBuilder, ReactiveFormsModule } from '@angular/forms';\n// Angular Material que uses en hero-form.component.html\nimport { MatCardModule } from '@angular/material/card';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\ndescribe('HeroFormComponent', () => {\n  let component;\n  let fixture;\n  let heroesServiceSpy;\n  let routerSpy;\n  beforeEach(/*#__PURE__*/_asyncToGenerator(function* () {\n    heroesServiceSpy = jasmine.createSpyObj('HeroesService', ['getHeroById', 'updateHero', 'addHero']);\n    routerSpy = jasmine.createSpyObj('Router', ['navigate']);\n    // Simulamos un paramMap con ID=1\n    const mockParamMap = {\n      get: name => name === 'id' ? '1' : null,\n      has: name => name === 'id',\n      getAll: name => name === 'id' ? ['1'] : [],\n      keys: ['id']\n    };\n    // Mock de ActivatedRoute con snapshot.paramMap\n    const routeMock = {\n      snapshot: {\n        paramMap: mockParamMap\n      }\n    };\n    // Simulamos que getHeroById(1) retorna un hero\n    heroesServiceSpy.getHeroById.and.returnValue({\n      id: 1,\n      name: 'Batman',\n      power: 'Estrategia'\n    });\n    yield TestBed.configureTestingModule({\n      declarations: [HeroFormComponent // Declaramos el componente a testear\n      ],\n      imports: [ReactiveFormsModule, MatCardModule, MatFormFieldModule, MatInputModule, MatButtonModule, BrowserAnimationsModule],\n      providers: [FormBuilder, {\n        provide: HeroesService,\n        useValue: heroesServiceSpy\n      }, {\n        provide: Router,\n        useValue: routerSpy\n      }, {\n        provide: ActivatedRoute,\n        useValue: routeMock\n      }]\n    }).compileComponents();\n    fixture = TestBed.createComponent(HeroFormComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  }));\n  it('should create HeroFormComponent', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should call getHeroById if id param is present', () => {\n    // Esperamos que se haya llamado con 1\n    expect(heroesServiceSpy.getHeroById).toHaveBeenCalledWith(1);\n    // Form patchValue con { name: 'Batman', power: 'Estrategia' }\n    expect(component.heroForm.value.name).toBe('Batman');\n  });\n  it('should update hero if editingId is set', () => {\n    // Cambiamos el valor del form\n    component.heroForm.setValue({\n      name: 'Batman2',\n      power: 'Estrategia',\n      description: ''\n    });\n    component.saveHero();\n    expect(heroesServiceSpy.updateHero).toHaveBeenCalledWith({\n      id: 1,\n      name: 'Batman2',\n      power: 'Estrategia',\n      description: ''\n    });\n  });\n});","map":{"version":3,"names":["TestBed","HeroFormComponent","HeroesService","Router","ActivatedRoute","FormBuilder","ReactiveFormsModule","MatCardModule","MatFormFieldModule","MatInputModule","MatButtonModule","BrowserAnimationsModule","describe","component","fixture","heroesServiceSpy","routerSpy","beforeEach","_asyncToGenerator","jasmine","createSpyObj","mockParamMap","get","name","has","getAll","keys","routeMock","snapshot","paramMap","getHeroById","and","returnValue","id","power","configureTestingModule","declarations","imports","providers","provide","useValue","compileComponents","createComponent","componentInstance","detectChanges","it","expect","toBeTruthy","toHaveBeenCalledWith","heroForm","value","toBe","setValue","description","saveHero","updateHero"],"sources":["/Users/naranjax/app-heroes/src/app/heroes/components/hero-form/hero-form.component.spec.ts"],"sourcesContent":["// src/app/heroes/components/hero-form/hero-form.component.spec.ts\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { HeroFormComponent } from './hero-form.component';\nimport { HeroesService } from '../../../core/services/heroes.service';\nimport { Router, ActivatedRoute, ParamMap } from '@angular/router';\nimport { FormBuilder, ReactiveFormsModule } from '@angular/forms';\nimport { of } from 'rxjs';\n\n// Angular Material que uses en hero-form.component.html\nimport { MatCardModule } from '@angular/material/card';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { Hero } from '../../../core/models/hero.model';\n\ndescribe('HeroFormComponent', () => {\n  let component: HeroFormComponent;\n  let fixture: ComponentFixture<HeroFormComponent>;\n  let heroesServiceSpy: jasmine.SpyObj<HeroesService>;\n  let routerSpy: jasmine.SpyObj<Router>;\n\n  beforeEach(async () => {\n    heroesServiceSpy = jasmine.createSpyObj('HeroesService', [\n      'getHeroById',\n      'updateHero',\n      'addHero'\n    ]);\n    routerSpy = jasmine.createSpyObj('Router', ['navigate']);\n\n    // Simulamos un paramMap con ID=1\n    const mockParamMap: ParamMap = {\n      get: (name: string) => (name === 'id' ? '1' : null),\n      has: (name: string) => name === 'id',\n      getAll: (name: string) => (name === 'id' ? ['1'] : []),\n      keys: ['id']\n    };\n\n    // Mock de ActivatedRoute con snapshot.paramMap\n    const routeMock = {\n      snapshot: { paramMap: mockParamMap }\n    };\n\n    // Simulamos que getHeroById(1) retorna un hero\n    heroesServiceSpy.getHeroById.and.returnValue({\n      id: 1,\n      name: 'Batman',\n      power: 'Estrategia'\n    });\n\n    await TestBed.configureTestingModule({\n      declarations: [\n        HeroFormComponent // Declaramos el componente a testear\n      ],\n      imports: [\n        ReactiveFormsModule,\n        MatCardModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatButtonModule,\n        BrowserAnimationsModule\n      ],\n      providers: [\n        FormBuilder,\n        { provide: HeroesService, useValue: heroesServiceSpy },\n        { provide: Router, useValue: routerSpy },\n        { provide: ActivatedRoute, useValue: routeMock }\n      ]\n    }).compileComponents();\n\n    fixture = TestBed.createComponent(HeroFormComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create HeroFormComponent', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should call getHeroById if id param is present', () => {\n    // Esperamos que se haya llamado con 1\n    expect(heroesServiceSpy.getHeroById).toHaveBeenCalledWith(1);\n    // Form patchValue con { name: 'Batman', power: 'Estrategia' }\n    expect(component.heroForm.value.name).toBe('Batman');\n  });\n\n  it('should update hero if editingId is set', () => {\n    // Cambiamos el valor del form\n    component.heroForm.setValue({\n      name: 'Batman2',\n      power: 'Estrategia',\n      description: ''\n    });\n    component.saveHero();\n    expect(heroesServiceSpy.updateHero).toHaveBeenCalledWith({\n      id: 1,\n      name: 'Batman2',\n      power: 'Estrategia',\n      description: ''\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}