{"ast":null,"code":"// loading.interceptor.spec.ts\nimport { TestBed } from '@angular/core/testing';\nimport { LoadingInterceptor } from './loading.interceptor';\nimport { HTTP_INTERCEPTORS, HttpClient } from '@angular/common/http';\nimport { provideHttpClientTesting, HttpTestingController } from '@angular/common/http/testing';\ndescribe('LoadingInterceptor', () => {\n  let interceptor;\n  let http;\n  let httpMock;\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      providers: [provideHttpClientTesting(), {\n        provide: HTTP_INTERCEPTORS,\n        useClass: LoadingInterceptor,\n        multi: true\n      }]\n    });\n    interceptor = TestBed.inject(LoadingInterceptor);\n    http = TestBed.inject(HttpClient);\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n  afterEach(() => {\n    httpMock.verify();\n  });\n  it('debería activar y desactivar isLoading$ durante la petición', () => {\n    let currentLoading = false;\n    // Suscribimos para leer el valor actual de isLoading$\n    const sub = interceptor.isLoading$.subscribe(value => {\n      currentLoading = value;\n    });\n    // Al inicio, debería ser false\n    expect(currentLoading).toBeFalse();\n    // Disparamos una petición GET\n    http.get('/api/test').subscribe();\n    const req = httpMock.expectOne('/api/test');\n    expect(req.request.method).toBe('GET');\n    // Debería haberse activado (true)\n    expect(currentLoading).toBeTrue();\n    // Cerramos la petición\n    req.flush({});\n    // Tras finalizar, debería volver a false\n    expect(currentLoading).toBeFalse();\n    sub.unsubscribe();\n  });\n});","map":{"version":3,"names":["TestBed","LoadingInterceptor","HTTP_INTERCEPTORS","HttpClient","provideHttpClientTesting","HttpTestingController","describe","interceptor","http","httpMock","beforeEach","configureTestingModule","providers","provide","useClass","multi","inject","afterEach","verify","it","currentLoading","sub","isLoading$","subscribe","value","expect","toBeFalse","get","req","expectOne","request","method","toBe","toBeTrue","flush","unsubscribe"],"sources":["/Users/naranjax/app-heroes/src/app/core/interceptors/loading.interceptor.spec.ts"],"sourcesContent":["// loading.interceptor.spec.ts\n\nimport { TestBed } from '@angular/core/testing';\nimport { LoadingInterceptor } from './loading.interceptor';\nimport { HTTP_INTERCEPTORS, HttpClient } from '@angular/common/http';\nimport { provideHttpClientTesting, HttpTestingController } from '@angular/common/http/testing';\n\ndescribe('LoadingInterceptor', () => {\n  let interceptor: LoadingInterceptor;\n  let http: HttpClient;\n  let httpMock: HttpTestingController;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      providers: [\n        provideHttpClientTesting(),\n        { provide: HTTP_INTERCEPTORS, useClass: LoadingInterceptor, multi: true }\n      ]\n    });\n\n    interceptor = TestBed.inject(LoadingInterceptor);\n    http = TestBed.inject(HttpClient);\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n\n  afterEach(() => {\n    httpMock.verify();\n  });\n\n  it('debería activar y desactivar isLoading$ durante la petición', () => {\n    let currentLoading = false;\n\n    // Suscribimos para leer el valor actual de isLoading$\n    const sub = interceptor.isLoading$.subscribe(value => {\n      currentLoading = value;\n    });\n\n    // Al inicio, debería ser false\n    expect(currentLoading).toBeFalse();\n\n    // Disparamos una petición GET\n    http.get('/api/test').subscribe();\n    const req = httpMock.expectOne('/api/test');\n    expect(req.request.method).toBe('GET');\n\n    // Debería haberse activado (true)\n    expect(currentLoading).toBeTrue();\n\n    // Cerramos la petición\n    req.flush({});\n    // Tras finalizar, debería volver a false\n    expect(currentLoading).toBeFalse();\n\n    sub.unsubscribe();\n  });\n});\n"],"mappings":"AAAA;AAEA,SAASA,OAAO,QAAQ,uBAAuB;AAC/C,SAASC,kBAAkB,QAAQ,uBAAuB;AAC1D,SAASC,iBAAiB,EAAEC,UAAU,QAAQ,sBAAsB;AACpE,SAASC,wBAAwB,EAAEC,qBAAqB,QAAQ,8BAA8B;AAE9FC,QAAQ,CAAC,oBAAoB,EAAE,MAAK;EAClC,IAAIC,WAA+B;EACnC,IAAIC,IAAgB;EACpB,IAAIC,QAA+B;EAEnCC,UAAU,CAAC,MAAK;IACdV,OAAO,CAACW,sBAAsB,CAAC;MAC7BC,SAAS,EAAE,CACTR,wBAAwB,EAAE,EAC1B;QAAES,OAAO,EAAEX,iBAAiB;QAAEY,QAAQ,EAAEb,kBAAkB;QAAEc,KAAK,EAAE;MAAI,CAAE;KAE5E,CAAC;IAEFR,WAAW,GAAGP,OAAO,CAACgB,MAAM,CAACf,kBAAkB,CAAC;IAChDO,IAAI,GAAGR,OAAO,CAACgB,MAAM,CAACb,UAAU,CAAC;IACjCM,QAAQ,GAAGT,OAAO,CAACgB,MAAM,CAACX,qBAAqB,CAAC;EAClD,CAAC,CAAC;EAEFY,SAAS,CAAC,MAAK;IACbR,QAAQ,CAACS,MAAM,EAAE;EACnB,CAAC,CAAC;EAEFC,EAAE,CAAC,6DAA6D,EAAE,MAAK;IACrE,IAAIC,cAAc,GAAG,KAAK;IAE1B;IACA,MAAMC,GAAG,GAAGd,WAAW,CAACe,UAAU,CAACC,SAAS,CAACC,KAAK,IAAG;MACnDJ,cAAc,GAAGI,KAAK;IACxB,CAAC,CAAC;IAEF;IACAC,MAAM,CAACL,cAAc,CAAC,CAACM,SAAS,EAAE;IAElC;IACAlB,IAAI,CAACmB,GAAG,CAAC,WAAW,CAAC,CAACJ,SAAS,EAAE;IACjC,MAAMK,GAAG,GAAGnB,QAAQ,CAACoB,SAAS,CAAC,WAAW,CAAC;IAC3CJ,MAAM,CAACG,GAAG,CAACE,OAAO,CAACC,MAAM,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC;IAEtC;IACAP,MAAM,CAACL,cAAc,CAAC,CAACa,QAAQ,EAAE;IAEjC;IACAL,GAAG,CAACM,KAAK,CAAC,EAAE,CAAC;IACb;IACAT,MAAM,CAACL,cAAc,CAAC,CAACM,SAAS,EAAE;IAElCL,GAAG,CAACc,WAAW,EAAE;EACnB,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}